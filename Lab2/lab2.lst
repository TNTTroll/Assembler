     1                                  %include "../lib64.asm"
     2                              <1> section .text     ; ������� ����
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1>      push   rsi
     9 00000005 C60600              <1>      mov    byte[rsi],0 ; �� ����� �����
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    18 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    19 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    21 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    22                              <1>                        ; ���������� �������
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    27 0000003B 4889C8              <1>      mov    rax,rcx
    28 0000003E 48FFC0              <1>      inc    rax    ; ����� ����������+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    30 00000044 56                  <1>      push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    32 00000049 5F                  <1>      pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    50 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    51 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    54 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    55 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    56 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    57 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    58 00000073 6698                <1>          cbw            ; ��������� �� �����
    59 00000075 6650                <1>          push   ax      ; ��������� � �����
    60 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    61 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    62 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 0A7E20456E74657220-     StartMsg db 10, "~ Enter your numbers ~", 10
     4 00000009 796F7572206E756D62-
     4 00000012 657273207E0A       
     5                                  StartLen equ $-StartMsg
     6                                  
     7 00000018 0A7E20596F75722072-     ExitMsg db 10, "~ Your result ~", 10
     7 00000021 6573756C74207E0A   
     8                                  ExitLen equ $-ExitMsg
     9                                  
    10                                  section .bss
    11 00000000 <res Ah>                a resb 10
    12 0000000A <res Ah>                b resb 10
    13 00000014 <res Ah>                k resb 10
    14 0000001E <res Ah>                f resb 10
    15                                  
    16 00000028 <res Ah>                InBuf resb 10
    17 00000032 ????????                OutBuf resb 4
    18                                  lenIn equ $-InBuf
    19                                  lenOut equ $-OutBuf
    20                                  
    21                                  section .text
    22                                      global _start
    23                                  
    24                                  _start:
    25                                      
    26                                      ; вывод строки
    27 000000A9 B801000000                  mov rax, 1
    28 000000AE BF01000000                  mov rdi, 1
    29 000000B3 48BE-                       mov rsi, StartMsg
    29 000000B5 [0000000000000000] 
    30 000000BD BA18000000                  mov rdx, StartLen
    31 000000C2 0F05                        syscall
    32                                      
    33                                      ; ввод переменных
    34 000000C4 B800000000                  mov rax, 0
    35 000000C9 BF00000000                  mov rdi, 0
    36 000000CE 48BE-                       mov rsi, InBuf
    36 000000D0 [2800000000000000] 
    37 000000D8 BA0E000000                  mov rdx, lenIn
    38 000000DD 0F05                        syscall
    39                                   
    40 000000DF 48BF-                       mov rdi, InBuf
    40 000000E1 [2800000000000000] 
    41 000000E9 E864FFFFFF                  call StrToInt64
    42 000000EE 4883FB00                    cmp rbx, 0
    43 000000F2 0F85(00000000)              jne 0
    44 000000F8 48890425[00000000]          mov [a], rax
    45                                      
    46 00000100 B800000000                  mov rax, 0
    47 00000105 BF00000000                  mov rdi, 0
    48 0000010A 48BE-                       mov rsi, InBuf
    48 0000010C [2800000000000000] 
    49 00000114 BA0E000000                  mov rdx, lenIn
    50 00000119 0F05                        syscall
    51                                   
    52 0000011B 48BF-                       mov rdi, InBuf
    52 0000011D [2800000000000000] 
    53 00000125 E828FFFFFF                  call StrToInt64
    54 0000012A 4883FB00                    cmp rbx, 0
    55 0000012E 0F85(00000000)              jne 0
    56 00000134 48890425[0A000000]          mov [b], rax
    57                                      
    58 0000013C B800000000                  mov rax, 0
    59 00000141 BF00000000                  mov rdi, 0
    60 00000146 48BE-                       mov rsi, InBuf
    60 00000148 [2800000000000000] 
    61 00000150 BA0E000000                  mov rdx, lenIn
    62 00000155 0F05                        syscall
    63                                   
    64 00000157 48BF-                       mov rdi, InBuf
    64 00000159 [2800000000000000] 
    65 00000161 E8ECFEFFFF                  call StrToInt64
    66 00000166 4883FB00                    cmp rbx, 0
    67 0000016A 0F85(00000000)              jne 0
    68 00000170 48890425[14000000]          mov [k], rax
    69                                      
    70                                      ; подсчет
    71 00000178 8B1C25[14000000]            mov ebx, [k]   ; знаменатель 
    72 0000017F 0FAF1C25[14000000]          imul ebx, [k]
    73 00000187 83C302                      add ebx, 2
    74 0000018A 8B0425[0A000000]            mov eax, [b] ; левая часть
    75 00000191 0FAF0425[0A000000]          imul eax, [b]
    76 00000199 0FAF0425[0A000000]          imul eax, [b]
    77 000001A1 F7F8                        idiv eax
    78 000001A3 8B1C25[00000000]            mov ebx, [a] ; правая часть
    79 000001AA 0FAF1C25[0A000000]          imul ebx, [b]
    80 000001B2 29C3                        sub ebx, eax ; ответ
    81                                      
    82 000001B4 891C25[1E000000]            mov [f], ebx
    83                                      
    84                                      ; вывод
    85 000001BB B801000000                  mov rax, 1
    86 000001C0 BF01000000                  mov rdi, 1
    87 000001C5 48BE-                       mov rsi, ExitMsg 
    87 000001C7 [1800000000000000] 
    88 000001CF BA11000000                  mov rdx, ExitLen
    89 000001D4 0F05                        syscall 
    90                                      
    91 000001D6 48BE-                       mov rsi, OutBuf
    91 000001D8 [3200000000000000] 
    92 000001E0 488B0425[1E000000]          mov rax, [f] 
    93 000001E8 E813FEFFFF                  call IntToStr64
    94                                      
    95 000001ED B801000000                  mov rax, 1
    96 000001F2 BF01000000                  mov rdi, 1
    97 000001F7 48BE-                       mov rsi, OutBuf 
    97 000001F9 [3200000000000000] 
    98 00000201 BA04000000                  mov rdx, lenOut 
    99 00000206 0F05                        syscall 
   100                                      
   101                                      ; выход
   102 00000208 B83C000000                  mov rax, 60
   103 0000020D 4831FF                      xor rdi, rdi
   104 00000210 0F05                        syscall
